/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.ddemin.wext;

import com.github.ddemin.wext.model.ResponseRule;
import com.github.ddemin.wext.util.ExWiremockUtils;
import com.github.tomakehurst.wiremock.extension.Parameters;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

// TODO Make it nice
class ExWiremockUtilsTest {

    public static final int DELAY_MIN = 10000;
    public static final int DELAY_50 = 20000;
    public static final int DELAY_90 = 30000;
    public static final int DELAY_95 = 40000;
    public static final int MAX = 50000;

    @Test void testDelayGeneratorWithZeroError() {
        final ResponseRule delayRule
                = new ResponseRule(DELAY_MIN, DELAY_50, DELAY_90, DELAY_95, MAX, new Parameters());
        final double allowedError = 0.1;

        List<Long> delays = new ArrayList<>();
        for (int i = 0; i < 1_000_000; i++) {
            delays.add(ExWiremockUtils.getStatisticDelayForRule(delayRule));
        }

        Collections.sort(delays);

        long min = delays.get(0);
        long max = delays.get(delays.size() - 1);
        long p50 = percentile(delays, 50);
        long p90 = percentile(delays, 90);
        long p95 = percentile(delays, 95);

        System.out.println("Min = " + min);
        System.out.println("Max = " + max);
        System.out.println("P50 = " + p50);
        System.out.println("P90 = " + p90);
        System.out.println("P95 = " + p95);

        assertEquals(DELAY_MIN, min, "Min delay equal to " + DELAY_MIN);
        assertEquals(MAX, max, "Max delay equal to " + MAX);
        assertTrue(isGreaterWithError(p50, DELAY_50, allowedError), "P50 delay is greater than " + DELAY_50);
        assertTrue(isGreaterWithError(p90, DELAY_90, allowedError), "P90 delay is greater than " + DELAY_90);
        assertTrue(isGreaterWithError(p95, DELAY_95, allowedError), "P95 delay is greater than " + DELAY_95);
    }

    private long percentile(List<Long> latencies, int percentile) {
        int index = (int) Math.ceil(percentile * latencies.size() / 100.0 );
        return latencies.get(index - 1);
    }

    private boolean isGreaterWithError(long actualValue, long expectedValue, double allowedError) {
        return actualValue >= expectedValue && actualValue <= expectedValue + expectedValue * allowedError;
    }

}
